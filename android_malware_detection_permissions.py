from sklearn.feature_selection import mutual_info_classif
import csv
import numpy as np
import random
from sklearn.naive_bayes import GaussianNB
from sklearn.svm import SVC, LinearSVC

ratio=float(input("Enter Dataset Split Ratio: "))
feature_number=int(input("Enter number of top features wanted: "))

class android(object):
        def __init__(self):
                ds = open('datasetattrfinal.csv')
                rdr = csv.reader(ds)
                self.data = list(rdr)
                self.data = random.sample(self.data, len(self.data))
                self.data = np.array(self.data)
                ds.close() 

        def split(self):
                cols = np.shape(self.data)[1]
                self.X = self.data[:,:cols-2]
                self.X = self.X.astype(np.float)
                self.y = self.data[:,cols-1]
                self.y = np.array(self.y)
                self.y = self.y.astype(np.int)
                y = np.ravel(self.y,order='C')

        def topFeatureList(self):
                features = [i.strip() for i in open("C:\\Users\\ayush\\Desktop\\final\\features.txt").readlines()]
                features = np.array(features)
                print ("Features List:")
                print(features)
                mi = mutual_info_classif(self.X,self.y)
                self.featureind = sorted(range(len(mi)), key=lambda i: mi[i], reverse=True)[:feature_number]
                top = features[self.featureind]
                print("Top features selected are:")
                print (top)
                

        def splitDs(self):
                splitRows = int(ratio*len(self.data))
                trainData = self.X[:splitRows,self.featureind]
                trainTarget = self.y[:splitRows]
                testData = self.X[splitRows:,self.featureind]
                testTarget = self.y[splitRows:]
                return trainData, trainTarget, testData, testTarget

        def Bayes(self):
                clf = GaussianNB()
                trainData, trainTarget, testData, testTarget = self.splitDs()
                clf.fit(trainData,trainTarget)
                leng=len(testTarget)
                result_nb=clf.predict(testData)
                for i in range(0,leng) :
                        act=testTarget[i]
                        if (act==1):
                                   type1="Benign"
                        else :
                                   type1="Malware"
                        predicted=result_nb[i]
                        if (predicted==1):
                                   type2="Benign"
                        else :
                                   type2="Malware"
                        print (type1,",",type2)
                nbaccr = (clf.score(testData,testTarget))*100
                print ("Bayesian accuracy:" ,nbaccr)
        def SVM(self):
                clf = SVC()
                trainData, trainTarget, testData, testTarget = self.splitDs()
                clf.fit(trainData,trainTarget)
                leng=len(testTarget)
                result_SVM=clf.predict(testData)
                for i in range(0,leng) :
                        act=testTarget[i]
                        if (act==1):
                                   type1="Benign"
                        else :
                                   type1="Malware"
                        predicted=result_SVM[i]
                        if (predicted==1):
                                   type2="Benign"
                        else :
                                   type2="Malware"
                        print (type1,",",type2)
                svmaccr = (clf.score(testData,testTarget))*100
                print ("SVM accuracy:",svmaccr)


adr = android()
adr.split()
adr.topFeatureList()
adr.Bayes()
adr.SVM()
